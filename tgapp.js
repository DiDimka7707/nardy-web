// tgapp.js v15 ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ç–∞–±—ã, —Å–æ–∑–¥–∞–Ω–∏–µ/–≤—Ö–æ–¥, –±–∞–ª–∞–Ω—Å, –¥–æ–Ω–∞—Ç

// ====== –ù–ê–°–¢–†–û–ô–ö–ê –ë–≠–ö–ê ======
const API_BASE = 'https://eldest-gabbey-didimka-team-ba6a197d.koyeb.app' ; // ‚Üê –ü–û–ú–ï–ù–Ø–ô –Ω–∞ —Å–≤–æ–π Koyeb –¥–æ–º–µ–Ω

// ====== –£–¢–ò–õ–´ ======
const $ = (s,r=document)=>r.querySelector(s);
const $all = (s,r=document)=>Array.from(r.querySelectorAll(s));
function base(){ return API_BASE.replace(/\/$/,''); }
function toast(m){ alert(m); }
function setBusy(btn, busy, busyText){
  if (!btn) return;
  if (!btn.__label) btn.__label = btn.textContent;
  btn.disabled = !!busy;
  btn.textContent = busy ? (busyText || '–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶') : btn.__label;
}
async function api(path, opts={}){
  const url = `${base()}${path}`;
  const init = { method:'GET', headers:{'Content-Type':'application/json'}, ...opts };
  if (init.body && typeof init.body !== 'string') init.body = JSON.stringify(init.body);
  const res = await fetch(url, init);
  let data=null; try{ data = await res.json(); }catch{}
  if (!res.ok){
    const msg = (data && (data.detail||data.message)) || `HTTP ${res.status}`;
    const e = new Error(msg); e.status = res.status; e.data = data; throw e;
  }
  return data;
}

// ====== –¢–ê–ë–´ ======
function showScreen(key){
  $all('.screen').forEach(s=>s.classList.remove('active'));
  const el = $(`#screen-${key}`); if (el) el.classList.add('active');
  $all('nav.tabbar .tab').forEach(b=>b.classList.toggle('active', b.dataset.tab===key));
}
function bindTabs(){
  $all('nav.tabbar .tab').forEach(btn=>{
    if (btn.__bound) return;
    btn.__bound = true;
    btn.addEventListener('click', ()=>showScreen(btn.dataset.tab));
  });
}

// ====== –ë–ê–õ–ê–ù–° ======
const BAL_KEY = 'nardy.balance';
function getLocalBalance(){ return Number(localStorage.getItem(BAL_KEY)||0) }
function setLocalBalance(v){
  localStorage.setItem(BAL_KEY, String(v));
  const el = $('#balance-amount'); if (el) el.textContent = v;
}
async function fetchBalance(){
  // –ü—ã—Ç–∞–µ–º—Å—è —Å–ø—Ä–æ—Å–∏—Ç—å —É –±—ç–∫–∞, –∏–Ω–∞—á–µ ‚Äî –ª–æ–∫–∞–ª—å–Ω–æ
  try{
    // –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: /api/balance –∏–ª–∏ /api/user/balance
    let data;
    try { data = await api('/api/balance'); }
    catch(e){ if (e.status===404) data = await api('/api/user/balance'); else throw e; }
    const amount = Number((data&&data.balance)||0);
    setLocalBalance(amount);
  }catch{
    setLocalBalance(getLocalBalance()); // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª–∫–æ–π
  }
}

// ====== –î–û–ù–ê–¢ (–¥–µ–º–æ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ —á–µ—Ä–µ–∑ –±—ç–∫) ======
async function donate(amount){
  amount = Number(amount||0);
  if (!amount) return;
  try{
    // –µ—Å–ª–∏ –Ω–∞ –±—ç–∫–µ –µ—Å—Ç—å /api/donate ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º
    try { await api('/api/donate', {method:'POST', body:{amount}}); }
    catch(e){ if (e.status!==404) throw e; else setLocalBalance(getLocalBalance()+amount); }
    await fetchBalance();
    toast(`–°–ø–∞—Å–∏–±–æ! +${amount} –º–æ–Ω–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å ü•≥`);
  }catch(e){
    toast(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å: ${e.message||e}`);
  }
}

// ====== –ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–ï: —à–∏—Ç-–¥–∏–∞–ª–æ–≥ ======
function openJoinSheet(){ $('#join-sheet')?.classList.add('open'); }
function closeJoinSheet(){ $('#join-sheet')?.classList.remove('open'); }

// ====== –ò–ì–†–û–í–ê–Ø –õ–û–ì–ò–ö–ê ======
async function createRoom(btn){
  try{
    setBusy(btn, true, '–°–æ–∑–¥–∞—ë–º‚Ä¶');
    let data;
    // –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥–≤–∞ –∞–ø–∏: /api/room/create (—Ä–µ–∫–æ–º–µ–Ω–¥.) –∏ /api/room (—É—Å—Ç–∞—Ä.)
    try{ data = await api('/api/room/create', {method:'POST'}); }
    catch(e){ if (e.status===404) data = await api('/api/room', {method:'POST'}); else throw e; }
    const code = (data && (data.code||data.id||data.room)) || '';
    if (!code) throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
    toast(`–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: ${code}`);
  }catch(e){
    toast(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É: ${e.message||e}`);
  }finally{
    setBusy(btn,false);
  }
}

async function joinByCode(btn){
  const input = $('#joinCodeInput');
  const code = (input?.value||'').trim().toUpperCase();
  if (!code) return toast('–í–≤–µ–¥–∏ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã');
  try{
    setBusy(btn,true,'–ü—Ä–æ–≤–µ—Ä—è–µ–º‚Ä¶');
    let data;
    try{ data = await api(`/api/room/lookup?code=${encodeURIComponent(code)}`); }
    catch(e){ if (e.status===404) data = await api(`/api/room?code=${encodeURIComponent(code)}`); else throw e; }
    // –¥–æ–ø—É—Å—Ç–∏–º, —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç = {ok:true}
    toast(`–ö–æ–º–Ω–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞: ${code}`);
    closeJoinSheet();
    // TODO: –Ω–∞–≤–∏–≥–∞—Ü–∏—è –≤ —Å–∞–º—É –∏–≥—Ä—É
  }catch(e){
    toast(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è: ${e.message||e}`);
  }finally{
    setBusy(btn,false);
  }
}

async function quickMatch(btn){
  setBusy(btn,true,'–ò—â–µ–º‚Ä¶');
  // –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä ‚Äî –≤ –ø—Ä–æ–¥–µ —Ç—É—Ç –±—É–¥–µ—Ç —Å–æ–∫–µ—Ç/–æ—á–µ—Ä–µ–¥—å
  setTimeout(()=>{
    setBusy(btn,false);
    toast('–°–æ–ø–µ—Ä–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! (–¥–µ–º–æ)');
  }, 700);
}

// ====== –ü–†–ò–í–Ø–ó–ö–ê –ö–ù–û–ü–û–ö ======
function bindGameButtons(){
  const bCreate = $('#btn-create');
  if (bCreate && !bCreate.__b){ bCreate.__b=true; bCreate.addEventListener('click', ()=>createRoom(bCreate)); }

  const bJoin = $('#btn-join');
  if (bJoin && !bJoin.__b){ bJoin.__b=true; bJoin.addEventListener('click', openJoinSheet); }

  const bJoinGo = $('#btn-join-by-code');
  if (bJoinGo && !bJoinGo.__b){ bJoinGo.__b=true; bJoinGo.addEventListener('click', ()=>joinByCode(bJoinGo)); }

  const bQm = $('#btn-quick-match');
  if (bQm && !bQm.__b){ bQm.__b=true; bQm.addEventListener('click', ()=>quickMatch(bQm)); }

  const closeA = $('#join-close'), closeB = $('#join-cancel');
  [closeA, closeB].forEach(x=>{ if(x && !x.__b){ x.__b=true; x.addEventListener('click', closeJoinSheet); }});

  // Donate grid
  $all('[data-donate]').forEach(btn=>{
    if (btn.__b) return; btn.__b=true;
    btn.addEventListener('click', ()=>donate(btn.dataset.donate));
  });
  const bDonateCustom = $('#btn-donate-custom');
  if (bDonateCustom && !bDonateCustom.__b){
    bDonateCustom.__b=true;
    bDonateCustom.addEventListener('click', ()=>{
      const raw = prompt('–°–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç –ø–æ–ø–æ–ª–Ω–∏—Ç—å?');
      const val = Number(raw||0);
      if (val>0) donate(val);
    });
  }

  const saveProfile = $('#btn-save-profile');
  if (saveProfile && !saveProfile.__b){
    saveProfile.__b=true;
    saveProfile.addEventListener('click', ()=>{
      // –¥–µ–º–æ: –ø—Ä–æ—Å—Ç–æ —Ç–æ—Å—Ç
      toast('–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ');
    });
  }
}

function bindAll(){
  bindTabs();
  bindGameButtons();
  document.body.dataset.app = 'ready';
}

// –Ω–∞ –≤—Å—è–∫–∏–π ‚Äî —Å–ª–µ–¥–∏–º –∑–∞ –¥–∏–Ω–∞–º–∏–∫–æ–π DOM
const mo = new MutationObserver(()=>bindAll());

// ====== –°–¢–ê–†–¢ ======
document.addEventListener('DOMContentLoaded', async ()=>{
  bindAll();
  if (!$('.screen.active')) showScreen('games');
  mo.observe(document.documentElement, {subtree:true, childList:true});

  // –ø–∏–Ω–≥—É–µ–º –±—ç–∫, —á—Ç–æ–±—ã Koyeb –ø—Ä–æ–≥—Ä–µ–ª—Å—è
  try { await api('/health'); } catch {}

  // –ø–æ–¥—Ç—è–Ω—É—Ç—å –±–∞–ª–∞–Ω—Å
  await fetchBalance();
});
